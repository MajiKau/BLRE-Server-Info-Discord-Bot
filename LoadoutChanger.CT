<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="34">
  <Forms>
    <CETrainer Class="TTrainerForm" Encoding="Ascii85">Rgtky!!Qtr-GnwtQ#vy,WMDuH2qwhXTB)XusZnFWh{]y=SV]@3cByy;UWs=$4H$TUZj9h2X]s^j@xyycJNv;yh)x2C9wCx44ss.q,QVVpolIb+=YHmF7,8^OdxvZy3j6M-^lu0!wclF}riEsLclr{Smtv!FN[hgZhjRv8H$K1W8^3rQTqtn5WijF,b0eYHKFjGBB3=*Uj+SK6X]G7f11D5vLn/9t:_R4wuL{7DhjEcJZHBx!jKbM}OlKvug@rmmR3Te!:aDHk(%s5:HU0@mL,.k}w)[3WUhAr}Ue=:wpk}_qk}j!CHAw,o8Gv9-GscrZZ6tJc3PD2G5Gar?Mq=[F8[tdHj_A7)b@gwes5CobkqhZ_t7bo7.5-92,-NPhcR18_:;czC.$:17+B?S_0z10vvwU,y=VL6L]]jd#%6_Zt)D[s?L0T/?(?T</CETrainer>
  </Forms>
  <CheatEntries/>
  <UserdefinedSymbols/>
  <LuaScript>package.path = TrainerOrigin..'lua\\?.lua'
Json = require("lunajson")

--receivers = {}
--receiverAddresses = {}

--stocks = {}
--stockAddresses = {}

--barrels = {}
--barrelAddresses = {}

--scopes = {}
--scopeAddresses = {}

--players = {}
--playerAddresses = {}

primaryReceiverOffset = 0x798
primaryMuzzleOffset = 0x79C --Int
primaryStockOffset = 0x7A0
primaryBarrelOffset = 0x7A4
primaryMagazineOffset = 0x7A8 --Int
primaryScopeOffset = 0x7AC
primaryTagOffset = 0x7B0 --Int
primaryGripOffset = 0x7B4
primaryAmmoTypeOffset = 0x7B8

secondaryReceiverOffset = 0x7C4
secondaryMuzzleOffset = 0x7C8 --Int
secondaryStockOffset = 0x7CC
secondaryBarrelOffset = 0x7D0
secondaryMagazineOffset = 0x7D4 --Int
secondaryScopeOffset = 0x7D8
secondaryTagOffset = 0x7DC --Int
secondaryGripOffset = 0x7E0
secondaryAmmoTypeOffset = 0x7E4

gearOffset = 0xC94
tacticalOffset = 0xC98
skinOffset = 0xCA0

maxTag = 143

--assaultRifle = 0
--submachineGun = 0
--boltActionRifle = 0

--playerLoadouts = {}

CETrainer_CEButton1.Enabled = true
CETrainer_CELabel1.Caption = 'Click Enable after making sure\nthe game server is running'
CETrainer_CEButton1.Caption = 'Enable'

function GetReceiver(receiverAddress)
  for x=1, #receivers do
    local receiver = receivers[x]
    if(receiverAddress == receiver[1]) then
      return receivers[x]
    end
  end
  return nil
end

function GetPrimaryReceiver(playerAddress)
  local pointer = playerAddress + primaryReceiverOffset
  local address = readPointer(pointer)

  return GetReceiver(address)
end

function GetSecondaryReceiver(playerAddress)
  local pointer = playerAddress + secondaryReceiverOffset
  local address = readPointer(pointer)

  return GetReceiver(address)
end

function GetPlayerName(address)
  local pointer = address + 0x9C
  pointer = readPointer(pointer)
  if(pointer == nil) then return nil end
  pointer = pointer + 0x1EC
  pointer = readPointer(pointer)
  if(pointer == nil) then return nil end
  local name = readString(pointer, 64, true)
  return name
end

function ScanPlayers(totalPlayers)
    local doScan = false

    if(totalPlayers &gt; 16) then totalPlayers = 16 end
    --print(#players)
    --print(totalPlayers)
    if(#players == totalPlayers) then
        local playerValue = 0x01773220
        for x=1, #players do
            local value = readInteger(players[x][1])
            if(value ~= playerValue) then
                doScan = true
                break
            end
            local name = GetPlayerName(players[x][1])
            if(name ~= players[x][2]) then
                doScan = true
                break
            end
            local receiver = GetPrimaryReceiver(players[x][1])
            local receiver2 = GetSecondaryReceiver(players[x][1])
            if(receiver == nil or receiver2 == nil) then
                doScan = true
                break
            end
        end
    end
    if(#players ~= totalPlayers) then
        doScan = true
        --print(#players .. ":" .. totalPlayers)
    end
    if(doScan == false) then return end

    --print("Scanning Players")

    playerAddresses = AOBScan("20 32 77 01")

    --print(playerAddresses.getCount())

  --if(playerAddresses == 0) then
  --  playerAddresses = AOBScan("20 32 77 01")
  --end

    --print(playerAddresses.getCount())

    players = {}
    for x=0, playerAddresses.getCount()-1 do
        local address = tonumber(playerAddresses[x],16)
        local name = GetPlayerName(address)
        --print(name)
        if(name ~= nil) then
            local receiver = GetPrimaryReceiver(address)
            local receiver2 = GetSecondaryReceiver(address)
            if(receiver ~= nil and receiver ~= 0) then
                table.insert(players, {address, name, receiver, receiver2})
            end
        end
    end
    --print("Found " .. #players .. " Players")
    return players
end

function FindReceiverName(address)
  local pointer = address + 0x154
  pointer = readPointer(pointer)
  if(pointer ~= nil) then
    pointer = pointer + 0x30C
    pointer = readPointer(pointer)
    if(pointer ~= nil) then
      local name = readString(pointer, 64, true)
      return name
    end
  end

  return nil
end

function ScanReceivers()
  if(#receivers ~= 0) then
    return receivers
  end

  if(#receiverAddresses == 0) then
    local offsetAddresses = AOBScan("36 00 A0 00")
    for x=0, offsetAddresses.getCount()-1 do
      local offsetAddress = tonumber(offsetAddresses[x],16)
      local address = offsetAddress - 0xCC
      table.insert(receiverAddresses, address)
    end
  end


  for x=1, #receiverAddresses do
    local address = receiverAddresses[x]
    if(address ~= nil) then
      local name = FindReceiverName(address)
      if(name ~= nil) then
        table.insert(receivers, {address, name})

        if(name == "Assault Rifle") then
            assaultRifle = address
        end
        if(name == "Submachine Gun") then
            submachineGun = address
        end
        if(name == "Bolt-Action Rifle") then
            boltActionRifle = address
        end

        --print(name)

      end
    end
  end

  return receivers
end



function GetPlayerPrimary(name)
  --ScanReceivers()
  --ScanPlayers()

  for x=1, #players do
    local player = players[x]
    if(player[2] == name) then
      --print(player[2])
      --print(player[3][2])
      return player[3]
    end
  end
end

function SetPlayerPrimary(player, weapon)
    local receiver = nil
    for x=1, #receivers do
        if(receivers[x][2] == weapon.Receiver) then
            receiver = receivers[x]
            break
        end
    end

    if(receiver == nil) then return false end
    local currentReceiver = readPointer(player[1]+primaryReceiverOffset)
    if(currentReceiver == receiver[1] and currentReceiver ~= assaultRifle and
     currentReceiver ~= submachineGun and currentReceiver ~= boltActionRifle) then
        --print("Nothing to change")
        return false
    end

    local stock = nil
    for x=1, #stocks do
        if(stocks[x][2] == weapon.Stock) then
            stock = stocks[x]
            break
        end
    end
    local barrel = nil
    for x=1, #barrels do
        if(barrels[x][2] == weapon.Barrel) then
            barrel = barrels[x]
            break
        end
    end
    local scope = nil
    for x=1, #scopes do
        if(scopes[x][2] == weapon.Scope) then
            scope = scopes[x]
            break
        end
    end
    local grip = nil
    for x=1, #grips do
        if(grips[x][2] == weapon.Grip) then
            grip = grips[x]
            break
        end
    end
  --print("Changing Primary")
    writeInteger(player[1]+primaryReceiverOffset, receiver[1])
    if(stock ~= nil) then
        writeInteger(player[1]+primaryStockOffset, stock[1])
    --else
    --    writeInteger(player[1]+primaryStockOffset, 0)
    end
    if(barrel ~= nil) then
        writeInteger(player[1]+primaryBarrelOffset, barrel[1])
    --else
    --    writeInteger(player[1]+primaryBarrelOffset, 0)
    end
    if(scope ~= nil) then
        writeInteger(player[1]+primaryScopeOffset, scope[1])
    --else
    --    writeInteger(player[1]+primaryScopeOffset, 0)
    end
    if(grip ~= nil) then
        writeInteger(player[1]+primaryGripOffset, grip[1])
    --else
    --    writeInteger(player[1]+primaryGripOffset, 0)
    end
    writeInteger(player[1]+primaryMuzzleOffset, weapon.Muzzle)
    writeInteger(player[1]+primaryMagazineOffset, weapon.Magazine)
    writeInteger(player[1]+primaryTagOffset, math.floor(math.random()*maxTag)+1)
    return true
end

function SetPlayerSecondary(player, weapon)
    local receiver = nil
    for x=1, #receivers do
        if(receivers[x][2] == weapon.Receiver) then
            receiver = receivers[x]
            break
        end
    end
    if(receiver == nil) then return false end

    local stock = nil
    for x=1, #stocks do
        if(stocks[x][2] == weapon.Stock) then
            stock = stocks[x]
            break
        end
    end
    local barrel = nil
    for x=1, #barrels do
        if(barrels[x][2] == weapon.Barrel) then
            barrel = barrels[x]
            break
        end
    end
    local scope = nil
    for x=1, #scopes do
        if(scopes[x][2] == weapon.Scope) then
            scope = scopes[x]
            break
        end
    end
    local grip = nil
    for x=1, #grips do
        if(grips[x][2] == weapon.Grip) then
            grip = grips[x]
            break
        end
    end
  --print("Changing Secondary")
    writeInteger(player[1]+secondaryReceiverOffset, receiver[1])
    if(stock ~= nil) then
        writeInteger(player[1]+secondaryStockOffset, stock[1])
    --else
    --    writeInteger(player[1]+secondaryStockOffset, 0)
    end
    if(barrel ~= nil) then
        writeInteger(player[1]+secondaryBarrelOffset, barrel[1])
    --else
    --    writeInteger(player[1]+secondaryBarrelOffset, 0)
    end
    if(scope ~= nil) then
        writeInteger(player[1]+secondaryScopeOffset, scope[1])
    --else
    --    writeInteger(player[1]+secondaryScopeOffset, 0)
    end
    if(grip ~= nil) then
        writeInteger(player[1]+secondaryGripOffset, grip[1])
    --else
    --    writeInteger(player[1]+secondaryGripOffset, 0)
    end
    writeInteger(player[1]+secondaryMuzzleOffset, weapon.Muzzle)
    writeInteger(player[1]+secondaryMagazineOffset, weapon.Magazine)
    writeInteger(player[1]+secondaryTagOffset, math.floor(math.random()*maxTag)+1)
    return true
end

function SetPlayerGear(player, loadout)
    local gear1 = loadout.Gear1
    local gear2 = loadout.Gear2 * 0x100
    local gear3 = loadout.Gear3 * 0x10000
    local gear4 = loadout.Gear4 * 0x1000000
    local tactical = loadout.Tactical

    local gearCombined = gear1+gear2+gear3+gear4

    writeInteger(player[1]+gearOffset, gearCombined)
    writeInteger(player[1]+tacticalOffset, tactical)
end

function SetLoadout(player, loadout)
    local playerAddress = player[1]
    local primaryTagPointer = playerAddress + primaryTagOffset
    local primaryTag = readPointer(primaryTagPointer)

    if(primaryTag ~= 0) then return end

    local primaryReceiverPointer = playerAddress + primaryReceiverOffset
    local primaryReceiver = readPointer(primaryReceiverPointer)

    if(primaryReceiver == assaultRifle) then
        if(SetPlayerPrimary(player, loadout.Loadout1.Primary)) then
            SetPlayerSecondary(player, loadout.Loadout1.Secondary)
            SetPlayerGear(player, loadout.Loadout1)
        end
    end
    if(primaryReceiver == submachineGun) then
        if(SetPlayerPrimary(player, loadout.Loadout2.Primary)) then
            SetPlayerSecondary(player, loadout.Loadout2.Secondary)
            SetPlayerGear(player, loadout.Loadout2)
        end
    end
    if(primaryReceiver == boltActionRifle) then
        if(SetPlayerPrimary(player, loadout.Loadout3.Primary)) then
            SetPlayerSecondary(player, loadout.Loadout3.Secondary)
            SetPlayerGear(player, loadout.Loadout3)
        end
    end
end

function UpdateLoadouts()
    for x=1, #players do
        local player = players[x]
        --print(player[2])
        for y=1, #playerLoadouts.Loadouts do
            local loadout = playerLoadouts.Loadouts[y]
            --print(loadout.PlayerName)
            if(player[2] == loadout.PlayerName) then
                SetLoadout(player, loadout)
                break
            end
        end
    end
end

function LoadItems()
    local path = TrainerOrigin.."src\\items.json"
    local contents = ""
    local items = {}
    local file, err = io.open( path, "r" )

    if file then
        -- read all contents of file into a string
        local contents = file:read( "*a" )
        --print(contents)
        items = Json.decode(contents);
        io.close( file )
        if(items == nil) then print("No items found in items.json!") end
        return items
    end
    print('Failed to open items.json\n'..err)
    return nil
end

function LoadLoadouts()
    local path = TrainerOrigin.."src\\loadouts.json"
    local contents = ""
    local loadouts = {}
    local file, err = io.open( path, "r" )

    if file then
        -- read all contents of file into a string
        local contents = file:read( "*a" )
        --print(contents)
        loadouts = Json.decode(contents);
        io.close( file )
        return loadouts
    end
    print('Failed to open loadouts.json\n'..err)
    return nil
end

scanCount = 0

function Update30Seconds(totalPlayers)
    scanCount = scanCount-30
    CETrainer_CEButton1.Caption = scanCount
    --print('Update! '..totalPlayers)
    ScanPlayers(totalPlayers)
    playerLoadouts = LoadLoadouts()
    --print('Players: '..#players)
    --print('Player Loadouts: '..#playerLoadouts.Loadouts)
end

function Update5Seconds()
    scanCount = scanCount+1
    CETrainer_CEButton1.Caption = scanCount
    --print('HEY')
    if(#players &gt; 0) then
        --print('#players')
        if(#playerLoadouts.Loadouts &gt; 0) then
            --print('playerLoadouts')
            UpdateLoadouts()
        end
    end
end


function FindAttachmentName(address)
  local pointer = address + 0x154
  pointer = readPointer(pointer)
  if(pointer ~= nil) then
    pointer = pointer + 0xCC
    pointer = readPointer(pointer)
    if(pointer ~= nil) then
      local name = readString(pointer, 128, true)
      return name
    end
  end

  return nil
end


function ScanStocks()
  if(#stocks ~= 0) then
    return stocks
  end

  if(#stockAddresses == 0) then
    local offsetAddresses = AOBScan("58 1B 01 00")
    for x=0, offsetAddresses.getCount()-1 do
      local offsetAddress = tonumber(offsetAddresses[x],16)
      local address = offsetAddress - 0x2C
      table.insert(stockAddresses, address)
    end
  end


  for x=1, #stockAddresses do
    local address = stockAddresses[x]
    if(address ~= nil) then
      local name = FindAttachmentName(address)
      if(name ~= nil) then
        table.insert(stocks, {address, name})
        --print(name)
      end
    end
  end
end

function ScanBarrels()
  if(#barrels ~= 0) then
    return barrels
  end

  if(#barrelAddresses == 0) then
    local offsetAddresses = AOBScan("6F 16 01 00")
    for x=0, offsetAddresses.getCount()-1 do
      local offsetAddress = tonumber(offsetAddresses[x],16)
      local address = offsetAddress - 0x2C
      table.insert(barrelAddresses, address)
    end
  end


  for x=1, #barrelAddresses do
    local address = barrelAddresses[x]
    if(address ~= nil) then
      local name = FindAttachmentName(address)
      if(name ~= nil) then
        table.insert(barrels, {address, name})
        --print(name)
      end
    end
  end
end

function ScanScopes()
  if(#scopes ~= 0) then
    return scopes
  end

  if(#scopeAddresses == 0) then
    local offsetAddresses = AOBScan("3D 1E 01 00")
    for x=0, offsetAddresses.getCount()-1 do
      local offsetAddress = tonumber(offsetAddresses[x],16)
      local address = offsetAddress - 0x2C
      table.insert(scopeAddresses, address)
    end
  end


  for x=1, #scopeAddresses do
    local address = scopeAddresses[x]
    if(address ~= nil) then
      local name = FindAttachmentName(address)
      if(name ~= nil) then
        table.insert(scopes, {address, name})
        --print(name)
      end
    end
  end
end


function InitialScan()
    local everything = AOBScan('80 01 6A 01')
    for x = 0, everything.getCount()-1 do
        local address = tonumber(everything[x],16)
        local name = FindAttachmentName(address)
        if(name ~= nil and name ~= ' ' and name ~= '') then
            if(has_value(items.Stocks, name)) then
                table.insert(stocks, {address, name})
            elseif(has_value(items.Barrels, name)) then
                table.insert(barrels, {address, name})
            elseif(has_value(items.Scopes, name)) then
                table.insert(scopes, {address, name})
            elseif(has_value(items.Grips, name)) then
                table.insert(grips, {address, name})
            --else
                --table.insert(unknowns, {address, name})
            end
        else
            name = FindReceiverName(address)
            if(name ~= nil and name ~= ' ' and name ~= '') then
                if(has_value(items.Receivers, name)) then
                    table.insert(receivers, {address, name})

                    if(name == "Assault Rifle") then
                        assaultRifle = address
                    end
                    if(name == "Submachine Gun") then
                        submachineGun = address
                    end
                    if(name == "Bolt-Action Rifle") then
                        boltActionRifle = address
                    end
                else
                    --table.insert(unknowns, {address, name})
                end
            else
                --table.insert(unknowns, {address, name})
            end
        end
    end
end


function has_value (tab, val)
    for index, value in ipairs(tab) do
        if value == val then
            return true
        end
    end

    return false
end

function print_names(tab)
    for x = 1, #tab do
        print(tab[x][2])
    end
end


function FindOtherName(address)
  local pointer = address + 0x154
  pointer = readPointer(pointer)
  if(pointer ~= nil) then
    pointer = pointer + 0xCC
    pointer = readPointer(pointer)
    if(pointer ~= nil) then
      local name = readString(pointer, 128, true)
      return name
    end
  end

  return nil
end

function print_names2(tab)
    for x = 1, #tab do
        local name = FindOtherName(tab[x][1])
        if(name ~= nil) then
            print(name)
        end
    end
end




--TRAINERGENERATORSTART--
--This is autogenerated code. Changing code in this block will
--get erased and rewritten if you regenerate the trainer code

--Uncomment the following line if this is a Cheat Table format trainer and you don't want CE to show (Tip, save as .CETRAINER alternatively)
--hideAllCEWindows()

RequiredCEVersion=7.2
if (getCEVersion==nil) or (getCEVersion()&lt;RequiredCEVersion) then
  messageDialog('Please install Cheat Engine '..RequiredCEVersion, mtError, mbOK)
  closeCE()
end
CETrainer.SEPERATOR.Visible=false

getAutoAttachList().add("FoxGame-win32-Shipping-Patched-Server.exe")
gPlaySoundOnAction=false
CETrainer.show()
function AboutClick()
  showMessage(gAboutText)
end
gAboutText=[[This trainer was made by Cheat Engine
www.cheatengine.org]]

function CloseClick()
  --called by the close button onClick event, and when closing the form
  closeCE()
  return caFree --onClick doesn't care, but onClose would like a result
end

--TRAINERGENERATORSTOP--
function CETrainer_CEButton1Click(sender)

    --receivers = {}
    --receiverAddresses = {}
    --stocks = {}
    --stockAddresses = {}
    --barrels = {}
    --barrelAddresses = {}
    --scopes = {}
    --scopeAddresses = {}

    items = LoadItems()

    receivers = {}
    stocks = {}
    barrels = {}
    scopes = {}
    grips = {}
    unknowns = {}

    assaultRifle = 0
    submachineGun = 0
    boltActionRifle = 0
    InitialScan()

    players = {}
    playerAddresses = {}


    playerLoadouts = {}

    openLuaServer('blrevive')
    --openLuaServer('blreviveDev')
    --ScanReceivers()
    --ScanBarrels()
    --ScanStocks()
    --ScanScopes()

    CETrainer_CEButton1.Enabled = false
    CETrainer_CELabel1.Caption = 'Attached to\n' .. (process or 'NOTHING')
    CETrainer_CEButton1.Caption = 'Running'


    --print("------RECEIVERS------")
    --print_names(receivers)
    --print("------STOCKS------")
    --print_names(stocks)
    --print("------BARRELS------")
    --print_names(barrels)
    --print("------SCOPES------")
    --print_names(scopes)
    --print("------GRIPS------")
    --print_names(grips)
    --print("------UNKNOWNS------")
    --print_names2(unknowns)

end


</LuaScript>
</CheatTable>
