<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="34">
  <Forms>
    <CETrainer Class="TTrainerForm" Encoding="Ascii85">Rgtky!!Qtr-GnwtQ#vy,WMDuH2qwhXTB)XusZnFWh{]y=SV]@3cByy;UWs=$4H$TUZj9h2X]s^j@xyycJNv;yh)x2C9wCx44ss.q,QVVpolIb+=YHmF7,8^OdxvZy3j6M-^lu0!wclF}riEsLclr{Smtv!FN[hgZhjRv8H$K1W8^3rQTqtn5WijF,b0eYHKFjGBB3=*Uj+SK6X]G7f11D5vLn/9t:_R4wuL{7DhjEcJZHBx!jKbM}OlKvug@rmmR3Te!:aDHk(%s5:HU0@mL,.k}w)[3WUhAr}Ue=:wpk}_qk}j!CHAw,o8Gv9-GscrZZ6tJc3PD2G5Gar?Mq=[F8[tdHj_A7)b@gwes5CobkqhZ_t7bo7.5-92,-NPhcR18_:;czC.$:17+B?S_0z10vvwU,y=VL6L]]jd#%6_Zt)D[s?L0T/?(?T</CETrainer>
  </Forms>
  <CheatEntries/>
  <UserdefinedSymbols/>
  <LuaScript>package.path = TrainerOrigin..'lua\\?.lua'
Json = require("lunajson")

-- Primary weapon
primaryReceiverOffset = 0x798
primaryMuzzleOffset = 0x79C -- Int
primaryStockOffset = 0x7A0
primaryBarrelOffset = 0x7A4
primaryMagazineOffset = 0x7A8 -- Int
primaryScopeOffset = 0x7AC
primaryTagOffset = 0x7B0 -- Int
primaryGripOffset = 0x7B4
primaryAmmoTypeOffset = 0x7B8
primaryCamoOffset = 0x7BC

-- Secondary weapon
secondaryReceiverOffset = 0x7C4
secondaryMuzzleOffset = 0x7C8 -- Int
secondaryStockOffset = 0x7CC
secondaryBarrelOffset = 0x7D0
secondaryMagazineOffset = 0x7D4 -- Int
secondaryScopeOffset = 0x7D8
secondaryTagOffset = 0x7DC -- Int
secondaryGripOffset = 0x7E0
secondaryAmmoTypeOffset = 0x7E4
secondaryCamoOffset = 0x7E8

itemNameOffset = 0x154
receveiverNameOffset = 0x30C
attachmentNameOffset = 0xCC

-- Depot items
depot1Offset = 0x870 -- Unlock ID
depot2Offset = 0x940
depot3Offset = 0xA10
depot4Offset = 0xAE0
depot5Offset = 0xBB0

depotNameIdOffset = 0x8
depotImageIconRefOffset = 0x14
depotWpnOffset = 0x50
depotScoOffset = 0x8C
depotItemTypeOffset = 0xB0
depotItemClassOffset = 0xBC
depotCostOffset = 0xC8

armorOffset = 0xC8C -- Camo, Upper, Lower, Helmet
trophyOffset = 0xC90
gearOffset = 0xC94
tacticalOffset = 0xC98
isFemaleOffset = 0xC9C
skinOffset = 0xCA0

maxGear = 51
maxTag = 143
maxHelmet = 88
maxUpperBody = 10
maxLowerBody = 11
maxCamo = 163
maxTrophy = 53
maxSkin = 34
defaultSkin = 0xFFFFFFFF -- 4294967295

nameAndIpOffset = 0x9C
nameOffset = 0x1EC
ipOffset = 0x234

playerValue = 0x01773220
playerValueString = '20 32 77 01'

itemValueString = '80 01 6A 01'

populationBaseAddress = '"FoxGame-win32-Shipping-Patched-Server.exe"+01522DE4'
populationAddressOffset1 =0x0
populationAddressOffset2 =0x8

CETrainer_CEButton1.Enabled = true
CETrainer_CELabel1.Caption = 'Click Enable after making sure\nthe game server is running'
CETrainer_CEButton1.Caption = 'Enable'

function GetReceiver(receiverAddress)
    for x = 1, #receivers do
        local receiver = receivers[x]
        if (receiverAddress == receiver[1]) then
            return receivers[x]
        end
    end
    return nil
end

function GetPrimaryReceiver(playerAddress)
    local pointer = playerAddress + primaryReceiverOffset
    local address = readPointer(pointer)

    return GetReceiver(address)
end

function GetSecondaryReceiver(playerAddress)
    local pointer = playerAddress + secondaryReceiverOffset
    local address = readPointer(pointer)

    return GetReceiver(address)
end

function GetPlayerName(address)
    local pointer = address + nameAndIpOffset
    pointer = readPointer(pointer)
    if (pointer == nil) then
        return nil
    end
    pointer = pointer + nameOffset
    pointer = readPointer(pointer)
    if (pointer == nil) then
        return nil
    end
    local name = readString(pointer, 64, true)
    return name
end

function GetPlayerIP(address)
    local pointer = address + nameAndIpOffset
    pointer = readPointer(pointer)
    if (pointer == nil) then
        return nil
    end
    pointer = pointer + ipOffset
    pointer = readPointer(pointer)
    if (pointer == nil) then
        return nil
    end
    local ip = readString(pointer, 64, true)
    return ip
end

function ScanPlayers(totalPlayers)
    local doScan = false

    if(totalPlayers &gt; 16) then totalPlayers = 16 end
    --print(#players)
    --print(totalPlayers)
    if(#players == totalPlayers) then
        for x=1, #players do
            local value = readInteger(players[x][1])
            if(value ~= playerValue) then
                doScan = true
                break
            end
            local name = GetPlayerName(players[x][1])
            if(name ~= players[x][2]) then
                doScan = true
                break
            end
            local receiver = GetPrimaryReceiver(players[x][1])
            local receiver2 = GetSecondaryReceiver(players[x][1])
            if(receiver == nil or receiver2 == nil) then
                doScan = true
                break
            end
        end
    end
    if(#players ~= totalPlayers) then
        doScan = true
        --print(#players .. ":" .. totalPlayers)
    end
    if(doScan == false) then return end

    --print("Scanning Players")

    playerAddresses = AOBScan(playerValueString)
    --print(playerAddresses.getCount())

    players = {}
    bots = {}
    for x=0, playerAddresses.getCount()-1 do
        local address = tonumber(playerAddresses[x],16)
        local name = GetPlayerName(address)
        local ip = GetPlayerIP(address)
        if(name ~= nil) then
            local receiver = GetPrimaryReceiver(address)
            local receiver2 = GetSecondaryReceiver(address)
            if(receiver ~= nil and receiver ~= 0) then
                if(ip ~= nil) then
                    --print("player: " .. address .. " " .. name .. " " .. ip)
                    table.insert(players, {address, name, receiver, receiver2, ip})
                else
                    --print("bot: " .. address .. " " .. name)
                    table.insert(bots, {address, name, receiver, receiver2, ip})
                end
            end
        end
    end
    --print("Found " .. #players .. " Players")
    return players
end

function FindReceiverName(address)
    local pointer = address + itemNameOffset
    pointer = readPointer(pointer)
    if (pointer ~= nil) then
        pointer = pointer + receveiverNameOffset
        pointer = readPointer(pointer)
        if (pointer ~= nil) then
            local name = readString(pointer, 64, true)
            return name
        end
    end

    return nil
end

function SetPlayerPrimary(player, weapon)
    local receiver = nil
    for x=1, #receivers do
        if(receivers[x][2] == weapon.Receiver) then
            receiver = receivers[x]
            break
        end
    end

    if(receiver == nil) then return false end
    local currentReceiver = readPointer(player[1]+primaryReceiverOffset)

    local stock = nil
    for x=1, #stocks do
        if(stocks[x][2] == weapon.Stock) then
            stock = stocks[x]
            break
        end
    end
    local barrel = nil
    for x=1, #barrels do
        if(barrels[x][2] == weapon.Barrel) then
            barrel = barrels[x]
            break
        end
    end
    local scope = nil
    for x=1, #scopes do
        if(scopes[x][2] == weapon.Scope) then
            scope = scopes[x]
            break
        end
    end
    local grip = nil
    for x=1, #grips do
        if(grips[x][2] == weapon.Grip) then
            grip = grips[x]
            break
        end
    end
    local ammoType = nil
    for x=1, #ammoTypes do
        if(ammoTypes[x][2] == weapon.AmmoType) then
            ammoType = ammoTypes[x]
            break
        end
    end

    if(type(weapon.Tag) ~= "number" or weapon.Tag &lt; 1 or weapon.Tag &gt; maxTag) then
        weapon.Tag = math.floor(math.random()*maxTag)+1
    end

    writeInteger(player[1]+primaryReceiverOffset, receiver[1])
    if(stock ~= nil) then
        writeInteger(player[1]+primaryStockOffset, stock[1])
    end
    if(barrel ~= nil) then
        writeInteger(player[1]+primaryBarrelOffset, barrel[1])
    end
    if(scope ~= nil) then
        writeInteger(player[1]+primaryScopeOffset, scope[1])
    end
    if(grip ~= nil) then
        writeInteger(player[1]+primaryGripOffset, grip[1])
    end
    if(ammoType ~= nil) then
        writeInteger(player[1]+primaryAmmoTypeOffset, ammoType[1])
    end
    writeInteger(player[1]+primaryMuzzleOffset, weapon.Muzzle)
    writeInteger(player[1]+primaryMagazineOffset, weapon.Magazine)
    writeInteger(player[1]+primaryTagOffset, weapon.Tag)
    writeInteger(player[1]+primaryCamoOffset, weapon.Camo)
    return true
end

function SetPlayerSecondary(player, weapon)
    local receiver = nil
    for x=1, #receivers do
        if(receivers[x][2] == weapon.Receiver) then
            receiver = receivers[x]
            break
        end
    end
    if(receiver == nil) then return false end

    local stock = nil
    for x=1, #stocks do
        if(stocks[x][2] == weapon.Stock) then
            stock = stocks[x]
            break
        end
    end
    local barrel = nil
    for x=1, #barrels do
        if(barrels[x][2] == weapon.Barrel) then
            barrel = barrels[x]
            break
        end
    end
    local scope = nil
    for x=1, #scopes do
        if(scopes[x][2] == weapon.Scope) then
            scope = scopes[x]
            break
        end
    end
    local grip = nil
    for x=1, #grips do
        if(grips[x][2] == weapon.Grip) then
            grip = grips[x]
            break
        end
    end
    local ammoType = nil
    for x=1, #ammoTypes do
        if(ammoTypes[x][2] == weapon.AmmoType) then
            ammoType = ammoTypes[x]
            break
        end
    end
    writeInteger(player[1]+secondaryReceiverOffset, receiver[1])
    if(stock ~= nil) then
        writeInteger(player[1]+secondaryStockOffset, stock[1])
    end
    if(barrel ~= nil) then
        writeInteger(player[1]+secondaryBarrelOffset, barrel[1])
    end
    if(scope ~= nil) then
        writeInteger(player[1]+secondaryScopeOffset, scope[1])
    end
    if(grip ~= nil) then
        writeInteger(player[1]+secondaryGripOffset, grip[1])
    end
    if(ammoType ~= nil) then
        writeInteger(player[1]+secondaryAmmoTypeOffset, ammoType[1])
    end

    if(type(weapon.Tag) ~= "number" or weapon.Tag &lt; 1 or weapon.Tag &gt; maxTag) then
        weapon.Tag = math.floor(math.random()*maxTag)+1
    end

    writeInteger(player[1]+secondaryMuzzleOffset, weapon.Muzzle)
    writeInteger(player[1]+secondaryMagazineOffset, weapon.Magazine)
    writeInteger(player[1]+secondaryTagOffset, weapon.Tag)
    writeInteger(player[1]+secondaryCamoOffset, weapon.Camo)
    return true
end

function SetPlayerGear(player, loadout)
    if(type(loadout.Gear1) ~= "number" or loadout.Gear1 &gt; maxGear) then loadout.Gear1 = 46 end
    if(type(loadout.Gear2) ~= "number" or loadout.Gear2 &gt; maxGear) then loadout.Gear2 = 46 end
    if(type(loadout.Gear3) ~= "number" or loadout.Gear3 &gt; maxGear) then loadout.Gear3 = 46 end
    if(type(loadout.Gear4) ~= "number" or loadout.Gear4 &gt; maxGear) then loadout.Gear4 = 46 end

    local gear1 = loadout.Gear1
    local gear2 = loadout.Gear2 * 0x100
    local gear3 = loadout.Gear3 * 0x10000
    local gear4 = loadout.Gear4 * 0x1000000
    local tactical = loadout.Tactical

    local gearCombined = gear1+gear2+gear3+gear4

    writeInteger(player[1]+gearOffset, gearCombined)
    writeInteger(player[1]+tacticalOffset, tactical)
end

function SetPlayerSex(player, loadout)
    if(type(loadout.IsFemale) ~= "boolean") then loadout.IsFemale = false end
    
    local isFemale = loadout.IsFemale and 1 or 0
    writeInteger(player[1]+isFemaleOffset, isFemale)
end

function SetPlayerArmor(player, loadout)
    if(type(loadout.Camo) ~= "number" or loadout.Camo &gt; maxCamo) then loadout.Camo = 0 end
    if(type(loadout.UpperBody) ~= "number" or loadout.UpperBody &gt; maxUpperBody) then loadout.UpperBody = 0 end
    if(type(loadout.LowerBody) ~= "number" or loadout.LowerBody &gt; maxLowerBody) then loadout.LowerBody = 0 end
    if(type(loadout.Helmet) ~= "number" or loadout.Helmet &gt; maxHelmet) then loadout.Helmet = 0 end
    if(type(loadout.Skin) ~= "number" or loadout.Skin &gt; maxSkin or loadout.Skin &lt; 0) then loadout.Skin = defaultSkin end
    if(type(loadout.Trophy) ~= "number" or loadout.Trophy &gt; maxTrophy or loadout.Trophy &lt; 0) then loadout.Trophy = 0 end

    local armor1 = loadout.Camo
    local armor2 = loadout.UpperBody * 0x100
    local armor3 = loadout.LowerBody * 0x10000
    local armor4 = loadout.Helmet * 0x1000000

    local armorCombined = armor1+armor2+armor3+armor4

    writeInteger(player[1]+armorOffset, armorCombined)
    writeInteger(player[1]+skinOffset, loadout.Skin)
    writeInteger(player[1]+trophyOffset, loadout.Trophy)
end

function SetLoadout(player, loadout)
    local playerAddress = player[1]
    local primaryTagPointer = playerAddress + primaryTagOffset
    local primaryTag = readPointer(primaryTagPointer)

    if(primaryTag ~= 0) then return end

    local primaryReceiverPointer = playerAddress + primaryReceiverOffset
    local primaryReceiver = readPointer(primaryReceiverPointer)

    if(primaryReceiver == assaultRifle) then
        if(SetPlayerPrimary(player, loadout.Loadout1.Primary)) then
            SetPlayerSecondary(player, loadout.Loadout1.Secondary)
            SetPlayerGear(player, loadout.Loadout1)
            SetPlayerSex(player, loadout.Loadout1)
            SetPlayerArmor(player, loadout.Loadout1)
        end
    elseif(primaryReceiver == submachineGun) then
        if(SetPlayerPrimary(player, loadout.Loadout2.Primary)) then
            SetPlayerSecondary(player, loadout.Loadout2.Secondary)
            SetPlayerGear(player, loadout.Loadout2)
            SetPlayerSex(player, loadout.Loadout2)
            SetPlayerArmor(player, loadout.Loadout2)
        end
    elseif(primaryReceiver == boltActionRifle) then
        if(SetPlayerPrimary(player, loadout.Loadout3.Primary)) then
            SetPlayerSecondary(player, loadout.Loadout3.Secondary)
            SetPlayerGear(player, loadout.Loadout3)
            SetPlayerSex(player, loadout.Loadout3)
            SetPlayerArmor(player, loadout.Loadout3)
        end
    end
end

function UpdateLoadouts()
    --print(#players)
    for x=1, #players do
        local player = players[x]
        local foundLoadout = false
        --print(player[2] .. " : " .. player[5])
        for y=1, #playerLoadouts.Loadouts do
            local loadout = playerLoadouts.Loadouts[y]
            --print(loadout.PlayerName .. " : " .. loadout.IP)
            if(player[2] == loadout.PlayerName and player[5] == loadout.IP) then
                SetLoadout(player, loadout)
                foundLoadout = true
                break
            end
        end
        if(foundLoadout == false) then
            for y=1, #playerLoadouts.Loadouts do
                local loadout = playerLoadouts.Loadouts[y]
                if(player[2] == loadout.PlayerName) then
                    SetLoadout(player, loadout)
                    break
                end
            end
        end
    end
end

function LoadItems()
    local path = TrainerOrigin.."src\\items.json"
    local contents = ""
    local items = {}
    local file, err = io.open( path, "r" )

    if file then
        -- read all contents of file into a string
        local contents = file:read( "*a" )
        --print(contents)
        items = Json.decode(contents);
        io.close( file )
        if(items == nil) then print("No items found in items.json!") end
        return items
    end
    print('Failed to open items.json\n'..err)
    return nil
end

function LoadLoadouts()
    local path = TrainerOrigin.."src\\loadouts.json"
    local loadouts = {}
    local file, err = io.open( path, "r" )
    if file then
        -- read all contents of file into a string
        local contents = file:read( "*a" )
        io.close( file )
        if(playerLoadoutsRaw ~= contents) then
          playerLoadoutsRaw = contents
          loadouts = Json.decode(contents);
          return loadouts
        end
        return nil
    end
    print('Failed to open loadouts.json\n'..err)
    return nil
end

function FindAttachmentName(address)
    local pointer = address + itemNameOffset
    pointer = readPointer(pointer)
    if (pointer ~= nil) then
        pointer = pointer + attachmentNameOffset
        pointer = readPointer(pointer)
        if (pointer ~= nil) then
            local name = readString(pointer, 128, true)
            return name
        end
    end

    return nil
end

function InitialScan()
    local everything = AOBScan(itemValueString)
    for x = 0, everything.getCount()-1 do
        local address = tonumber(everything[x],16)
        local name = FindAttachmentName(address)
        if(name ~= nil and name ~= ' ' and name ~= '') then
            if(has_value(items.Stocks, name)) then
                table.insert(stocks, {address, name})
            elseif(has_value(items.Barrels, name)) then
                table.insert(barrels, {address, name})
            elseif(has_value(items.Scopes, name)) then
                table.insert(scopes, {address, name})
            elseif(has_value(items.Grips, name)) then
                table.insert(grips, {address, name})
            elseif(has_value(items.AmmoTypes, name)) then
                table.insert(ammoTypes, {address, name})
                --print(address..' : '..name)
            else
                --print(address..' : '..name)
                --table.insert(ammoTypes, {address, name})
                --table.insert(unknowns, {address, name})
            end
        else
            name = FindReceiverName(address)
            if(name ~= nil and name ~= ' ' and name ~= '') then
                if(has_value(items.Receivers, name)) then
                    table.insert(receivers, {address, name})
                    if(name == "Assault Rifle") then
                        assaultRifle = address
                    end
                    if(name == "Submachine Gun") then
                        submachineGun = address
                    end
                    if(name == "Bolt-Action Rifle") then
                        boltActionRifle = address
                    end
                else
                    --table.insert(unknowns, {address, name})
                end
            else
                --table.insert(unknowns, {address, name})
            end
        end
    end
end

function StorePlayerList()
    local path = TrainerOrigin.."output\\player_list.json"
    local contents = '{"PlayerCount": '.. #players ..', "PlayerList": ['
    local file, err = io.open( path, "w" )
    
    for x=1, #players do
        contents = contents .. '"' .. players[x][2] .. '"'
        if x ~= #players then
            contents = contents .. ','
        end
    end

    contents = contents .. "]}"

    if file then
        file:write(contents)
        io.close(file)
        return
    end
    print('Failed to open player_list.json\n'..err)
    return nil
end

function has_value (tab, val)
    for index, value in ipairs(tab) do
        if value == val then
            return true
        end
    end
    return false
end

timerCounter = 0
local function timer_tick(timer)
  
    -- Every 5 seconds
    if(math.fmod(timerCounter,5) == 0) then
        local pointer = populationBaseAddress
        pointer = readPointer(pointer) + populationAddressOffset1
        pointer = readPointer(pointer) + populationAddressOffset2
        local totalPlayers = readInteger(pointer)
        ScanPlayers(totalPlayers)
        StorePlayerList()
    end


    -- Every second if there are players
    if(#players &gt; 0) then

        -- Every 10 seconds
        if(math.fmod(timerCounter,10) == 0) then
            local loadouts = LoadLoadouts()
            if(loadouts ~= nil) then
                playerLoadouts = loadouts
            end
        end

        --print('#players: ' .. #players)
        if(#playerLoadouts.Loadouts &gt; 0) then
            --print('playerLoadouts')
            UpdateLoadouts()
        end
        CETrainer_CEButton1.Caption = #players .. '/16 | ' .. timerCounter
    end

    timerCounter = timerCounter + 1

    -- code setting done state.
    if DoneState == true then
        timer.destroy()
    end
end



--TRAINERGENERATORSTART--
--This is autogenerated code. Changing code in this block will
--get erased and rewritten if you regenerate the trainer code

--Uncomment the following line if this is a Cheat Table format trainer and you don't want CE to show (Tip, save as .CETRAINER alternatively)
--hideAllCEWindows()

RequiredCEVersion=7.2
if (getCEVersion==nil) or (getCEVersion()&lt;RequiredCEVersion) then
  messageDialog('Please install Cheat Engine '..RequiredCEVersion, mtError, mbOK)
  closeCE()
end
CETrainer.SEPERATOR.Visible=false

getAutoAttachList().add("FoxGame-win32-Shipping-Patched-Server.exe")
gPlaySoundOnAction=false
CETrainer.show()
function AboutClick()
  showMessage(gAboutText)
end
gAboutText=[[This trainer was made by Cheat Engine
www.cheatengine.org]]

function CloseClick()
  --called by the close button onClick event, and when closing the form
  closeCE()
  return caFree --onClick doesn't care, but onClose would like a result
end

--TRAINERGENERATORSTOP--
function CETrainer_CEButton1Click(sender)
    items = LoadItems()

    receivers = {}
    stocks = {}
    barrels = {}
    scopes = {}
    grips = {}
    ammoTypes = {}
    table.insert(ammoTypes, {0, 'None'})
    unknowns = {}

    assaultRifle = 0
    submachineGun = 0
    boltActionRifle = 0
    InitialScan()

    players = {}
    playerAddresses = {}


    playerLoadouts = {}
    playerLoadoutsRaw = ""

    local loadouts = LoadLoadouts()
    if(loadouts ~= nil) then
        playerLoadouts = loadouts
    end

    CETrainer_CEButton1.Enabled = false
    CETrainer_CELabel1.Caption = 'Attached to\n' .. (process or 'NOTHING')
    CETrainer_CEButton1.Caption = 'Running'

    local someTimer = createTimer()
    someTimer.Interval = 1000
    someTimer.OnTimer = timer_tick
end


</LuaScript>
</CheatTable>
